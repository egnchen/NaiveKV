// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/master.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Worker struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_31543f0e9829c49c, []int{0}
}

func (m *Worker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Worker.Unmarshal(m, b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return xxx_messageInfo_Worker.Size(m)
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Worker) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Key struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_31543f0e9829c49c, []int{1}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*Worker)(nil), "proto.Worker")
	proto.RegisterType((*Key)(nil), "proto.Key")
}

func init() {
	proto.RegisterFile("proto/master.proto", fileDescriptor_31543f0e9829c49c)
}

var fileDescriptor_31543f0e9829c49c = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x4d, 0x2c, 0x2e, 0x49, 0x2d, 0xd2, 0x03, 0x73, 0x84, 0x58, 0xc1, 0x94, 0x92,
	0x05, 0x17, 0x5b, 0x78, 0x7e, 0x51, 0x76, 0x6a, 0x91, 0x90, 0x14, 0x17, 0x47, 0x46, 0x7e, 0x71,
	0x49, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0x24, 0xc4,
	0xc5, 0x52, 0x90, 0x5f, 0x54, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0x66, 0x2b, 0x89,
	0x73, 0x31, 0x7b, 0xa7, 0x56, 0x0a, 0x09, 0x70, 0x31, 0x67, 0xa7, 0x56, 0x42, 0x75, 0x80, 0x98,
	0x46, 0x26, 0x5c, 0x1c, 0xde, 0x61, 0xbe, 0x60, 0xbb, 0x84, 0x34, 0xb8, 0x38, 0xdd, 0x53, 0x4b,
	0xa0, 0x36, 0x70, 0x41, 0xac, 0xd6, 0xf3, 0x4e, 0xad, 0x94, 0xe2, 0x85, 0xb2, 0x21, 0x52, 0x4a,
	0x0c, 0x4e, 0xec, 0x51, 0x10, 0x17, 0x25, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd7, 0x91, 0xf8, 0x03, 0xb5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KVMasterClient is the client API for KVMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVMasterClient interface {
	GetWorker(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Worker, error)
}

type kVMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewKVMasterClient(cc grpc.ClientConnInterface) KVMasterClient {
	return &kVMasterClient{cc}
}

func (c *kVMasterClient) GetWorker(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := c.cc.Invoke(ctx, "/proto.KVMaster/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVMasterServer is the server API for KVMaster service.
type KVMasterServer interface {
	GetWorker(context.Context, *Key) (*Worker, error)
}

// UnimplementedKVMasterServer can be embedded to have forward compatible implementations.
type UnimplementedKVMasterServer struct {
}

func (*UnimplementedKVMasterServer) GetWorker(ctx context.Context, req *Key) (*Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}

func RegisterKVMasterServer(s *grpc.Server, srv KVMasterServer) {
	s.RegisterService(&_KVMaster_serviceDesc, srv)
}

func _KVMaster_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVMasterServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KVMaster/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVMasterServer).GetWorker(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _KVMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KVMaster",
	HandlerType: (*KVMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorker",
			Handler:    _KVMaster_GetWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/master.proto",
}
