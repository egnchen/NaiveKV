// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backup.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BackupReply struct {
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=kv.proto.Status" json:"status,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupReply) Reset()         { *m = BackupReply{} }
func (m *BackupReply) String() string { return proto.CompactTextString(m) }
func (*BackupReply) ProtoMessage()    {}
func (*BackupReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_65240d19de191688, []int{0}
}

func (m *BackupReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupReply.Unmarshal(m, b)
}
func (m *BackupReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupReply.Marshal(b, m, deterministic)
}
func (m *BackupReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupReply.Merge(m, src)
}
func (m *BackupReply) XXX_Size() int {
	return xxx_messageInfo_BackupReply.Size(m)
}
func (m *BackupReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupReply.DiscardUnknown(m)
}

var xxx_messageInfo_BackupReply proto.InternalMessageInfo

func (m *BackupReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *BackupReply) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*BackupReply)(nil), "kv.proto.BackupReply")
}

func init() {
	proto.RegisterFile("backup.proto", fileDescriptor_65240d19de191688)
}

var fileDescriptor_65240d19de191688 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4a, 0x4c, 0xce,
	0x2e, 0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x2e, 0x83, 0xb0, 0xa4, 0x78,
	0x92, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0x20, 0x3c, 0xa5, 0x40, 0x2e, 0x6e, 0x27, 0xb0, 0xba, 0xa0,
	0xd4, 0x82, 0x9c, 0x4a, 0x21, 0x0d, 0x2e, 0xb6, 0xe2, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x3e, 0x23, 0x01, 0x3d, 0x98, 0x3e, 0xbd, 0x60, 0xb0, 0x78, 0x10, 0x54, 0x5e,
	0x48, 0x82, 0x8b, 0xbd, 0x2c, 0xb5, 0xa8, 0x38, 0x33, 0x3f, 0x4f, 0x82, 0x49, 0x81, 0x51, 0x83,
	0x25, 0x08, 0xc6, 0x35, 0x6a, 0x61, 0xe4, 0xe2, 0xf0, 0x0e, 0x83, 0x98, 0x2a, 0x64, 0xc3, 0xc5,
	0x11, 0x52, 0x94, 0x98, 0x57, 0x9c, 0x96, 0x5a, 0x24, 0x24, 0x8a, 0x30, 0x0c, 0x22, 0xeb, 0x9a,
	0x57, 0x52, 0x54, 0x29, 0x85, 0x21, 0x0c, 0x76, 0x8a, 0x12, 0x83, 0x06, 0xa3, 0x90, 0x15, 0x17,
	0x4b, 0x70, 0x65, 0x5e, 0x32, 0xe9, 0x3a, 0x0d, 0x18, 0x9d, 0xd8, 0xa3, 0x58, 0xc1, 0x52, 0x49,
	0x6c, 0x60, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x16, 0x3e, 0x91, 0x11, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KVBackupClient is the client API for KVBackup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVBackupClient interface {
	// Transfer a lot of entries and return one reply. This is for full-size updates
	// and all operations will be in a transaction, thus all-or-nothing.
	Transfer(ctx context.Context, opts ...grpc.CallOption) (KVBackup_TransferClient, error)
	// Transfer one entry(or multiple, small amount of entries) and return one ack,
	// this is for sync options, useful in lossless backup.
	Sync(ctx context.Context, opts ...grpc.CallOption) (KVBackup_SyncClient, error)
}

type kVBackupClient struct {
	cc grpc.ClientConnInterface
}

func NewKVBackupClient(cc grpc.ClientConnInterface) KVBackupClient {
	return &kVBackupClient{cc}
}

func (c *kVBackupClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (KVBackup_TransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVBackup_serviceDesc.Streams[0], "/kv.proto.KVBackup/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVBackupTransferClient{stream}
	return x, nil
}

type KVBackup_TransferClient interface {
	Send(*BackupEntry) error
	CloseAndRecv() (*BackupReply, error)
	grpc.ClientStream
}

type kVBackupTransferClient struct {
	grpc.ClientStream
}

func (x *kVBackupTransferClient) Send(m *BackupEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVBackupTransferClient) CloseAndRecv() (*BackupReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVBackupClient) Sync(ctx context.Context, opts ...grpc.CallOption) (KVBackup_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVBackup_serviceDesc.Streams[1], "/kv.proto.KVBackup/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVBackupSyncClient{stream}
	return x, nil
}

type KVBackup_SyncClient interface {
	Send(*BackupEntry) error
	Recv() (*BackupReply, error)
	grpc.ClientStream
}

type kVBackupSyncClient struct {
	grpc.ClientStream
}

func (x *kVBackupSyncClient) Send(m *BackupEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVBackupSyncClient) Recv() (*BackupReply, error) {
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KVBackupServer is the server API for KVBackup service.
type KVBackupServer interface {
	// Transfer a lot of entries and return one reply. This is for full-size updates
	// and all operations will be in a transaction, thus all-or-nothing.
	Transfer(KVBackup_TransferServer) error
	// Transfer one entry(or multiple, small amount of entries) and return one ack,
	// this is for sync options, useful in lossless backup.
	Sync(KVBackup_SyncServer) error
}

// UnimplementedKVBackupServer can be embedded to have forward compatible implementations.
type UnimplementedKVBackupServer struct {
}

func (*UnimplementedKVBackupServer) Transfer(srv KVBackup_TransferServer) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedKVBackupServer) Sync(srv KVBackup_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterKVBackupServer(s *grpc.Server, srv KVBackupServer) {
	s.RegisterService(&_KVBackup_serviceDesc, srv)
}

func _KVBackup_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVBackupServer).Transfer(&kVBackupTransferServer{stream})
}

type KVBackup_TransferServer interface {
	SendAndClose(*BackupReply) error
	Recv() (*BackupEntry, error)
	grpc.ServerStream
}

type kVBackupTransferServer struct {
	grpc.ServerStream
}

func (x *kVBackupTransferServer) SendAndClose(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVBackupTransferServer) Recv() (*BackupEntry, error) {
	m := new(BackupEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KVBackup_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVBackupServer).Sync(&kVBackupSyncServer{stream})
}

type KVBackup_SyncServer interface {
	Send(*BackupReply) error
	Recv() (*BackupEntry, error)
	grpc.ServerStream
}

type kVBackupSyncServer struct {
	grpc.ServerStream
}

func (x *kVBackupSyncServer) Send(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVBackupSyncServer) Recv() (*BackupEntry, error) {
	m := new(BackupEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KVBackup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kv.proto.KVBackup",
	HandlerType: (*KVBackupServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _KVBackup_Transfer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _KVBackup_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "backup.proto",
}
