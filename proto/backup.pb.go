// gRPC service for KV data backup
// This is between worker node and backup node, or a worker node and a to-be worker node
// (during worker data migration)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: backup.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BackupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status `protobuf:"varint,1,opt,name=status,proto3,enum=kv.proto.Status" json:"status,omitempty"`
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *BackupReply) Reset() {
	*x = BackupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupReply) ProtoMessage() {}

func (x *BackupReply) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupReply.ProtoReflect.Descriptor instead.
func (*BackupReply) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{0}
}

func (x *BackupReply) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *BackupReply) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_backup_proto protoreflect.FileDescriptor

var file_backup_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x84, 0x01, 0x0a, 0x08, 0x4b, 0x56,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x15, 0x2e, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x6b, 0x76, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x15, 0x2e, 0x6b,
	0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_backup_proto_rawDescOnce sync.Once
	file_backup_proto_rawDescData = file_backup_proto_rawDesc
)

func file_backup_proto_rawDescGZIP() []byte {
	file_backup_proto_rawDescOnce.Do(func() {
		file_backup_proto_rawDescData = protoimpl.X.CompressGZIP(file_backup_proto_rawDescData)
	})
	return file_backup_proto_rawDescData
}

var file_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_backup_proto_goTypes = []interface{}{
	(*BackupReply)(nil), // 0: kv.proto.BackupReply
	(Status)(0),         // 1: kv.proto.Status
	(*BackupEntry)(nil), // 2: kv.proto.BackupEntry
}
var file_backup_proto_depIdxs = []int32{
	1, // 0: kv.proto.BackupReply.status:type_name -> kv.proto.Status
	2, // 1: kv.proto.KVBackup.Transfer:input_type -> kv.proto.BackupEntry
	2, // 2: kv.proto.KVBackup.Sync:input_type -> kv.proto.BackupEntry
	0, // 3: kv.proto.KVBackup.Transfer:output_type -> kv.proto.BackupReply
	0, // 4: kv.proto.KVBackup.Sync:output_type -> kv.proto.BackupReply
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_backup_proto_init() }
func file_backup_proto_init() {
	if File_backup_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backup_proto_goTypes,
		DependencyIndexes: file_backup_proto_depIdxs,
		MessageInfos:      file_backup_proto_msgTypes,
	}.Build()
	File_backup_proto = out.File
	file_backup_proto_rawDesc = nil
	file_backup_proto_goTypes = nil
	file_backup_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KVBackupClient is the client API for KVBackup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVBackupClient interface {
	// Transfer a lot of entries and return one reply. This is for full-size updates
	// and all operations will be in a transaction, thus all-or-nothing.
	Transfer(ctx context.Context, opts ...grpc.CallOption) (KVBackup_TransferClient, error)
	// Transfer one entry(or multiple, small amount of entries) and return one ack,
	// this is for sync options, useful in lossless backup.
	Sync(ctx context.Context, opts ...grpc.CallOption) (KVBackup_SyncClient, error)
}

type kVBackupClient struct {
	cc grpc.ClientConnInterface
}

func NewKVBackupClient(cc grpc.ClientConnInterface) KVBackupClient {
	return &kVBackupClient{cc}
}

func (c *kVBackupClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (KVBackup_TransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVBackup_serviceDesc.Streams[0], "/kv.proto.KVBackup/Transfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVBackupTransferClient{stream}
	return x, nil
}

type KVBackup_TransferClient interface {
	Send(*BackupEntry) error
	CloseAndRecv() (*BackupReply, error)
	grpc.ClientStream
}

type kVBackupTransferClient struct {
	grpc.ClientStream
}

func (x *kVBackupTransferClient) Send(m *BackupEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVBackupTransferClient) CloseAndRecv() (*BackupReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVBackupClient) Sync(ctx context.Context, opts ...grpc.CallOption) (KVBackup_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KVBackup_serviceDesc.Streams[1], "/kv.proto.KVBackup/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVBackupSyncClient{stream}
	return x, nil
}

type KVBackup_SyncClient interface {
	Send(*BackupEntry) error
	Recv() (*BackupReply, error)
	grpc.ClientStream
}

type kVBackupSyncClient struct {
	grpc.ClientStream
}

func (x *kVBackupSyncClient) Send(m *BackupEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVBackupSyncClient) Recv() (*BackupReply, error) {
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KVBackupServer is the server API for KVBackup service.
type KVBackupServer interface {
	// Transfer a lot of entries and return one reply. This is for full-size updates
	// and all operations will be in a transaction, thus all-or-nothing.
	Transfer(KVBackup_TransferServer) error
	// Transfer one entry(or multiple, small amount of entries) and return one ack,
	// this is for sync options, useful in lossless backup.
	Sync(KVBackup_SyncServer) error
}

// UnimplementedKVBackupServer can be embedded to have forward compatible implementations.
type UnimplementedKVBackupServer struct {
}

func (*UnimplementedKVBackupServer) Transfer(KVBackup_TransferServer) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedKVBackupServer) Sync(KVBackup_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterKVBackupServer(s *grpc.Server, srv KVBackupServer) {
	s.RegisterService(&_KVBackup_serviceDesc, srv)
}

func _KVBackup_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVBackupServer).Transfer(&kVBackupTransferServer{stream})
}

type KVBackup_TransferServer interface {
	SendAndClose(*BackupReply) error
	Recv() (*BackupEntry, error)
	grpc.ServerStream
}

type kVBackupTransferServer struct {
	grpc.ServerStream
}

func (x *kVBackupTransferServer) SendAndClose(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVBackupTransferServer) Recv() (*BackupEntry, error) {
	m := new(BackupEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KVBackup_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVBackupServer).Sync(&kVBackupSyncServer{stream})
}

type KVBackup_SyncServer interface {
	Send(*BackupReply) error
	Recv() (*BackupEntry, error)
	grpc.ServerStream
}

type kVBackupSyncServer struct {
	grpc.ServerStream
}

func (x *kVBackupSyncServer) Send(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVBackupSyncServer) Recv() (*BackupEntry, error) {
	m := new(BackupEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KVBackup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kv.proto.KVBackup",
	HandlerType: (*KVBackupServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _KVBackup_Transfer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _KVBackup_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "backup.proto",
}
